/*
 * This file is generated by jOOQ.
 */
package jooq.kotlin_elastic_db.tables;


import jooq.kotlin_elastic_db.KotlinElasticDb;
import jooq.kotlin_elastic_db.tables.records.UsersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Date;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = -1332503582;

    /**
     * The reference instance of <code>kotlin_elastic_db.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>kotlin_elastic_db.users.id</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>kotlin_elastic_db.users.last_name</code>.
     */
    public final TableField<UsersRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>kotlin_elastic_db.users.first_name</code>.
     */
    public final TableField<UsersRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>kotlin_elastic_db.users.gender</code>.
     */
    public final TableField<UsersRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>kotlin_elastic_db.users.phone_number</code>.
     */
    public final TableField<UsersRecord, String> PHONE_NUMBER = createField("phone_number", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>kotlin_elastic_db.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>kotlin_elastic_db.users.birth_date</code>.
     */
    public final TableField<UsersRecord, Date> BIRTH_DATE = createField("birth_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>kotlin_elastic_db.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>kotlin_elastic_db.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>kotlin_elastic_db.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>kotlin_elastic_db.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return KotlinElasticDb.KOTLIN_ELASTIC_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }
}
